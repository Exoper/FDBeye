% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/textRegions.R
\name{ias2regdef}
\alias{ias2regdef}
\title{Convert SR Research IAS (Interest Area Set) file to region
  definition file.}
\usage{
ias2regdef(fname, write.regdef = TRUE, reg.sep = NA, baseline.offset = 0,
  scrnW = NA, scrnH = NA, fnt.name = NA, fnt.size = NA, chrW = NA,
  chrH = NA, ln.space = NA, baseline = NA, mrgn.top = NA,
  mrgn.left = NA, mrgn.bottom = NA, mrgn.right = NA, rgn.maxH = NA,
  rgn.minH = NA, rgn.padL = NA, rgn.padR = NA)
}
\arguments{
\item{fname}{A string containing the name of a SR Research IAS
file ("*.ias"). Columns in file from left to right must be:
Interest Area Type (Rectangular), Region Number, x1 (left
boundary), y1 (top boundary), x2 (right boundary), y2 (bottom
boundary), Region Label.}

\item{write.regdef}{A boolean value of whether or not a converted
region definition file will be written. Default value is
\code{TRUE}.}

\item{reg.sep}{A string of characters that denotes the region
separator in the region labels. Default value is \code{NA},
which indicates that region boundary is not specified within the
region labels, and region labels will be catenated with
\code{"\t"} in between to determine the locations of the region
boundaries. If \code{reg.sep} is specified by the user, the
\code{reg.sep} string will be replaced by \code{"\t"} to
determine the locations of the region boundaries.}

\item{baseline.offset}{Number of pixels of which the baseline of
each line is above from y2. Default value is \code{0}.}

\item{scrnW}{Screen width in pixels (integer).}

\item{scrnH}{Screen height in pixels (integer).}

\item{fnt.name}{Font name used for stimulus text.}

\item{fnt.size}{Nominal font size in points for text display.}

\item{chrW}{Letter width in pixels, assuming a monospace font is
used.}

\item{chrH}{Nominal letter height in pixels.}

\item{ln.space}{Line spacing in pixels for multi line texts.}

\item{baseline}{Baseline positions for each line of text. Measured
in pixels from the top of the screen.}

\item{mrgn.top}{Top margin of the screen in pixels.}

\item{mrgn.left}{Left margin of the screen in pixels.}

\item{mrgn.bottom}{Bottom margin of the screen in pixels.}

\item{mrgn.right}{Right margin of the screen in pixels.}

\item{rgn.maxH}{Extent of regions of interest above baseline in
pixels.}

\item{rgn.minH}{Extent of regions of interest below baseline in
pixels.}

\item{rgn.padL}{Expand leftmost region on each line leftward by
this amount in pixels.}

\item{rgn.padR}{Expand rightmost region on each line rightward by
this amount in pixels.}
}
\value{
A vector of strings containing the region definition. The
  vector includes a yaml block with values for each of the
  function parameters except for \code{fname},
  \code{write.regdef}, \code{reg.sep}, and \code{baseline.offset}.
  In addition to the yaml block, the vector will include a pair of
  lines for each line of text in the stimulus. The first element
  of each pair is the text displayed on that line. The second
  element is a regioning string made up of square brackets ("[",
  "]"), and pipe ("|") characters. An opening bracket ("[")
  indicates the start of a line and a closing bracket ("]")
  indicates the end of a line. Pipes ("|") indicate region
  boundaries within a line.

  By default, the output vector is also written to a region
  definition file (*_regdef.txt) using the file name of the input
  .ias file. The region definition file can be hand edited to add
  or correct information in the yaml block, or to re-specify
  region placements.
}
\description{
Convert SR Rsearch IAS (Interest Area Set) file
  (*.ias) to a region definition file (*_regdef.txt). The latter
  is suitable for hand editing and can be used to generate
  alternative region specifications (e.g., multi word regions) for
  text stimuli.
}
\details{
If not specified, \code{baseline}, \code{chrH} and
  \code{chrW} will be calculated based on \code{x1}, \code{x2},
  \code{y1}, and \code{y2} in the .ias file such that:
  \itemize{
  \item{\code{baseline = y2 - baseline.offset} for each line of text}
  \item{\code{chrH = (y1 - y2)/2} for each line of text}
  \item{\code{chrW} is the smallest differece between region
  widths (i.e., \code{x2 - x1} of each region) among all regions.
  (Note that it is assumed the font of the stimulus text is
  monospace, and the estimation for \code{chrW} with proportional
  fonts could be very off.)}
  }

  Region labels (the last column in the .ias file) should be the
  content of the actual stimulus for each region, especially in
  terms of the number of characters or items within each region,
  in order to generate optimal regdef files. This way, when
  converting regdef to other formats, the region widths in the
  regioning string can be directly converted into the actual
  region widths in the stimulus. For example, if the stimuli are
  color patches instead of text (like in Rapid Automatized
  Naming), it may be ideal to use a single letter to stand for
  each color as the region label, instead of using the whole name
  of a color.
}
\examples{
## go full circle, regdef to ias and back
regdef_file <- system.file("extdata/story01-regdef.txt", package="FDBeye")

## Peek at regdef file.
regdef_story1 <- readLines(regdef_file)

## Generate an SRR DV compatible IAS file from the regdef file and write it to file.
ias_story1 <- regdef2ias(regdef_file)
tmpfile <- tempfile("ias_story1_", fileext=".tab")
write.table(ias_story1, tmpfile, sep="\\t", row.names=FALSE, col.names=FALSE, quote=FALSE)

regdef_story1_anew <- ias2regdef(tmpfile)

## The roundtrip is not quite successful. One problem is that regdef2ias() replaces spaces with
## underscores. This process needs to be reversed in ias2regdef(). I think a first pass at this
## would be to provide an argument consisting of a 2 element string vector: the first element is a
## string to be replaced and the second element is the replacement. Then, with a value of c("_",
## " "), underscores will be replaced by spaces. Maybe make that the default value.

## Also, ias2regdef() issues a warning
## " interest area vertical boundaries (x1, x2) are out of order". I'm not sure whether that's
## important to chase down or not.

## Finally, if the y2 values within a line are not all the same, then ias2regdef() shows some odd
## behavior. So, we'll doctor up an example to show this.

ias_story1$y2[9] <- 120 ## word is "recently"

tmpfile2 <- tempfile("ias_story1_", fileext=".tab")
write.table(ias_story1, tmpfile2, sep="\\t", row.names=FALSE, col.names=FALSE, quote=FALSE)

regdef_story1_anew2 <- ias2regdef(tmpfile2)

## You'll notice that now the word "recently" is now assigned to a separate line, and not properly
## included in the line that contains it. This definitely needs to be corrected. I can think of one
## possible approache: to introduce a "fuzz factor" around the value of y2 such that values within
## a certain distance of each other are considered to be the same. For example, if argument y2.fuzz
## were set to 5, then y2 values no more than 5 pixels apart would be considered the same. That
## said, it's certainly worth thinking this for a bit before committing to a specific approach.
}
\author{
Dave Braze \email{davebraze@gmail.com}

Monica Li \email{monica.yc.li@gmail.com}
}
